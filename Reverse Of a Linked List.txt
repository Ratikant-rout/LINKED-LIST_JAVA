import java.util.*;

public class studyopedia{

    public static class Node{
         int data;
         Node next;
      
      public Node(int data){
         this.data = data;
         this.next = null;
    }

}
 public static Node head;
 public static Node tail;
 public static int size;

 public void addFirst(int data){
   //step 1//
   Node newNode = new Node(data);
   size++;
   if(head == null){
      head = tail = newNode;
      return;
}
  //step2//
  newNode.next = head;

  //step3//
  head = newNode;
}
  public void addLast(int data){
     Node newNode = new Node(data);
     size++;
    if(head == null){
       head = tail = newNode;
      return;
 }
    tail.next = newNode;
    tail = newNode;
}
  public void print(){
    if(head == null){
      System.out.println("LL is Empty");
      return;
   }
     Node temp = head;
    while(temp != null){
       System.out.print(temp.data+" ");
        temp = temp.next;
   }
     System.out.println("Null");
 }
   public static void add(int idx, int data){
         Node newNode = new Node(data);
         size++;
         Node temp = head;
         int i = 0;

        while(i<idx-1){
           temp = temp.next;
           i++;
    }
      //i = idx-1 temp -> prev
      newNode.next = temp.next;
      temp.next = newNode;
}
  public int removeFirst(){
    if(size == 0){
      System.out.println("LL is empty");
      return Integer.MIN_VALUE;
  }else if(size == 1){
       int val = head.data;
       head = tail = null;
       size = 0;
       return val;
    }

    int val = head.data;
    head = head.next;
    size--;
    return val;
}
    public int itrSearch(int key){
       Node temp = head;
       int i = 0;
  
   while(temp != null){
      if(temp.data == key){
         return i;
    }
      temp = temp.next;
      i++;
}
    //key not found//
        return -1;
}
  public int helper(Node head, int key){
     if(head == null){
      return -1;
   }
      if(head.data == key){
        return 0;
   }
     int idx = helper(head.next,key);
      if(idx == -1){
         return -1;
    }
       return idx+1;
}
   public void reverse(){
       Node prev = null;
       Node curr = tail = head;
       Node next;

      while(curr != null){
         next = curr.next;
         curr.next = prev;
         prev = curr;
         curr = next;
   }
     head = prev;
}

     public static void main(String args[]){
      studyopedia ll = new studyopedia();
          ll.addFirst(2);
          ll.addFirst(1);
          ll.addLast(5);
          ll.addLast(4);
          ll.add(2,3);
          
         ll.print();
         ll.reverse();
         ll.print();
         
   }
}